package com.anbaric.terra_reforged.util.handlers;

import com.anbaric.terra_reforged.blocks.TerraBlockThornBush;
import com.anbaric.terra_reforged.blocks.potionplants.TerraBlockPotionPlant;
import com.anbaric.terra_reforged.features.landscape.TerraFeatureOres;
import com.anbaric.terra_reforged.util.Reference;
import com.anbaric.terra_reforged.util.init.TerraBlockRegistry;
import com.anbaric.terra_reforged.util.init.TerraCarverRegistry;
import com.anbaric.terra_reforged.util.init.TerraFeatureRegistry;
import com.anbaric.terra_reforged.util.init.TerraTagRegistry;
import com.google.common.collect.ImmutableList;
import net.minecraft.block.Blocks;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.registry.WorldGenRegistries;
import net.minecraft.world.gen.Heightmap;
import net.minecraft.world.gen.blockplacer.ColumnBlockPlacer;
import net.minecraft.world.gen.blockplacer.SimpleBlockPlacer;
import net.minecraft.world.gen.blockstateprovider.SimpleBlockStateProvider;
import net.minecraft.world.gen.carver.ConfiguredCarver;
import net.minecraft.world.gen.feature.*;
import net.minecraft.world.gen.feature.template.BlockMatchRuleTest;
import net.minecraft.world.gen.feature.template.RuleTest;
import net.minecraft.world.gen.feature.template.TagMatchRuleTest;
import net.minecraft.world.gen.foliageplacer.BushFoliagePlacer;
import net.minecraft.world.gen.foliageplacer.FancyFoliagePlacer;
import net.minecraft.world.gen.placement.*;
import net.minecraft.world.gen.trunkplacer.FancyTrunkPlacer;
import net.minecraft.world.gen.trunkplacer.StraightTrunkPlacer;

import java.util.OptionalInt;

public class FeatureGenHandler
{
    public static ConfiguredFeature<?, ?> BOREAL_TREE;
    public static ConfiguredFeature<?, ?> PALM_TREE;
    public static ConfiguredFeature<?, ?> MAHOGANY_TREE;
    public static ConfiguredFeature<?, ?> MAHOGANY_TREE_LARGE;
    public static ConfiguredFeature<?, ?> MAHOGANY_TREE_BUSH;
    public static ConfiguredFeature<?, ?> EBON_TREE;
    public static ConfiguredFeature<?, ?> EBON_TREE_FANCY;
    public static ConfiguredFeature<?, ?> SHADE_TREE;
    public static ConfiguredFeature<?, ?> PEARL_TREE;
    public static ConfiguredFeature<?, ?> MUSHROOM_GIANT_GLOWING;
    public static ConfiguredFeature<?, ?> CACTUS_CORRUPT;
    public static ConfiguredFeature<?, ?> CACTUS_CRIMSON;
    public static ConfiguredFeature<?, ?> CACTUS_HALLOWED;

    public static ConfiguredFeature<?, ?> BOREAL_TREE_TAIGA_GEN;
    public static ConfiguredFeature<?, ?> BOREAL_TREE_TUNDRA_GEN;
    public static ConfiguredFeature<?, ?> PALM_TREE_GEN;
    public static ConfiguredFeature<?, ?> MAHOGANY_TREE_GEN;
    public static ConfiguredFeature<?, ?> EBON_TREE_PLAINS_GEN;
    public static ConfiguredFeature<?, ?> EBON_TREE_FOREST_GEN;
    public static ConfiguredFeature<?, ?> SHADE_TREE_PLAINS_GEN;
    public static ConfiguredFeature<?, ?> SHADE_TREE_FOREST_GEN;
    public static ConfiguredFeature<?, ?> PEARL_TREE_PLAINS_GEN;
    public static ConfiguredFeature<?, ?> PEARL_TREE_FOREST_GEN;
    public static ConfiguredFeature<?, ?> TAIGA_TREE_GEN;
    public static ConfiguredFeature<?, ?> CACTUS_CORRUPT_GEN;
    public static ConfiguredFeature<?, ?> CACTUS_CRIMSON_GEN;
    public static ConfiguredFeature<?, ?> CACTUS_HALLOWED_GEN;
    public static ConfiguredFeature<?, ?> REED_CORRUPT_GEN;
    public static ConfiguredFeature<?, ?> REED_CRIMSON_GEN;
    public static ConfiguredFeature<?, ?> REED_HALLOWED_GEN;
    public static ConfiguredFeature<?, ?> MUSHROOM_VILE_GEN;
    public static ConfiguredFeature<?, ?> MUSHROOM_VICIOUS_GEN;
    public static ConfiguredFeature<?, ?> MUSHROOM_GIANT_GLOWING_GEN;
    public static ConfiguredFeature<?, ?> THORN_PURPLE_GEN;
    public static ConfiguredFeature<?, ?> THORN_RED_GEN;
    public static ConfiguredFeature<?, ?> THORN_JUNGLE_GEN;
    public static ConfiguredFeature<?, ?> PLANT_BLINKROOT_GEN;
    public static ConfiguredFeature<?, ?> PLANT_DAYBLOOM_GEN;
    public static ConfiguredFeature<?, ?> PLANT_DEATHWEED_GEN;
    public static ConfiguredFeature<?, ?> PLANT_FIREBLOOM_GEN;
    public static ConfiguredFeature<?, ?> PLANT_MOONGLOW_GEN;
    public static ConfiguredFeature<?, ?> PLANT_SHIVERTHORN_GEN;
    public static ConfiguredFeature<?, ?> PLANT_WATERLEAF_GEN;
    public static ConfiguredFeature<?, ?> LAKE_CORRUPT_WATER_GEN;
    public static ConfiguredFeature<?, ?> LAKE_CRIMSON_WATER_GEN;
    public static ConfiguredFeature<?, ?> LAKE_HALLOWED_WATER_GEN;
    public static ConfiguredFeature<?, ?> LAKE_CORRUPT_LAVA_GEN;
    public static ConfiguredFeature<?, ?> LAKE_CRIMSON_LAVA_GEN;
    public static ConfiguredFeature<?, ?> LAKE_HALLOWED_LAVA_GEN;
    public static ConfiguredFeature<?, ?> FREEZE_TOP_CORRUPT_GEN;
    public static ConfiguredFeature<?, ?> FREEZE_TOP_CRIMSON_GEN;
    public static ConfiguredFeature<?, ?> FREEZE_TOP_HALLOWED_GEN;
    public static ConfiguredFeature<?, ?> DESERT_WELL_CORRUPT_GEN;
    public static ConfiguredFeature<?, ?> DESERT_WELL_CRIMSON_GEN;
    public static ConfiguredFeature<?, ?> DESERT_WELL_HALLOWED_GEN;
    public static ConfiguredFeature<?, ?> DISC_CLAY_GEN;
    public static ConfiguredFeature<?, ?> DISC_DIRT_GEN;
    public static ConfiguredFeature<?, ?> DISC_SAND_CORRUPT_GEN;
    public static ConfiguredFeature<?, ?> DISC_SAND_CRIMSON_GEN;
    public static ConfiguredFeature<?, ?> DISC_SAND_HALLOWED_GEN;
    public static ConfiguredFeature<?, ?> TRAP_ICE_THIN;

    //Ore Gen
    public static ConfiguredFeature<?, ?> ORE_DIRT_GEN;
    public static ConfiguredFeature<?, ?> ORE_GRAVEL_GEN;
    public static ConfiguredFeature<?, ?> ORE_SLUSH_GEN;
    public static ConfiguredFeature<?, ?> ORE_SILT_GEN;
    public static ConfiguredFeature<?, ?> ORE_ANDESITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_DIORITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_GRANITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_RED_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_FIRE_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_YELLOW_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_GREEN_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_BLUE_GEN;
    public static ConfiguredFeature<?, ?> ORE_MOSS_PURPLE_GEN;
    public static ConfiguredFeature<?, ?> ORE_SNOW_GEN;
    public static ConfiguredFeature<?, ?> ORE_ICE_GEN;
    public static ConfiguredFeature<?, ?> ORE_SANDSTONE_GEN;
    public static ConfiguredFeature<?, ?> ORE_COPPER_GEN;
    public static ConfiguredFeature<?, ?> ORE_TIN_GEN;
    public static ConfiguredFeature<?, ?> ORE_IRON_GEN;
    public static ConfiguredFeature<?, ?> ORE_LEAD_GEN;
    public static ConfiguredFeature<?, ?> ORE_SILVER_GEN;
    public static ConfiguredFeature<?, ?> ORE_TUNGSTEN_GEN;
    public static ConfiguredFeature<?, ?> ORE_GOLD_GEN;
    public static ConfiguredFeature<?, ?> ORE_PLATINUM_GEN;
    public static ConfiguredFeature<?, ?> ORE_METEORITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_DEMONITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_CRIMTANE_GEN;
    public static ConfiguredFeature<?, ?> ORE_HELLSTONE_GEN;
    public static ConfiguredFeature<?, ?> ORE_COBALT_GEN;
    public static ConfiguredFeature<?, ?> ORE_PALLADIUM_GEN;
    public static ConfiguredFeature<?, ?> ORE_MYTHRIL_GEN;
    public static ConfiguredFeature<?, ?> ORE_ORICHALCUM_GEN;
    public static ConfiguredFeature<?, ?> ORE_ADAMANTITE_GEN;
    public static ConfiguredFeature<?, ?> ORE_TITANIUM_GEN;
    public static ConfiguredFeature<?, ?> ORE_CHLOROPHYTE_GEN;
    public static ConfiguredFeature<?, ?> ORE_AMBER_GEN;
    public static ConfiguredFeature<?, ?> ORE_RUBY_GEN;
    public static ConfiguredFeature<?, ?> ORE_SAPPHIRE_GEN;
    public static ConfiguredFeature<?, ?> ORE_TOPAZ_GEN;
    public static ConfiguredFeature<?, ?> ORE_AMETHYST_GEN;
    public static ConfiguredFeature<?, ?> ORE_COAL_GEN;
    public static ConfiguredFeature<?, ?> ORE_LAPIS_GEN;
    public static ConfiguredFeature<?, ?> ORE_REDSTONE_GEN;
    public static ConfiguredFeature<?, ?> ORE_DIAMOND_GEN;
    public static ConfiguredFeature<?, ?> ORE_EMERALD_GEN;

    public static final RuleTest GENERAL_PREDICATE = new TagMatchRuleTest(TerraTagRegistry.GENERAL_REPLACERS);
    public static final RuleTest CORRUPT_PREDICATE = new TagMatchRuleTest(TerraTagRegistry.CORRUPT_REPLACERS);
    public static final RuleTest CRIMSON_PREDICATE = new TagMatchRuleTest(TerraTagRegistry.CRIMSON_REPLACERS);
    public static final RuleTest HALLOWED_PREDICATE = new TagMatchRuleTest(TerraTagRegistry.HALLOWED_REPLACERS);
    public static final RuleTest JUNGLE_MUD_PREDICATE = new TagMatchRuleTest(TerraTagRegistry.JUNGLE_REPLACERS);

    public static void configureFeatures()
    {
        BOREAL_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_boreal"), TerraFeatureRegistry.BOREAL_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        PALM_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_palm"), TerraFeatureRegistry.PALM_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        MAHOGANY_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_mahogany"), TerraFeatureRegistry.MAHOGANY_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        MAHOGANY_TREE_LARGE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_mahogany_large"), TerraFeatureRegistry.MAHOGANY_TREE_LARGE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        MAHOGANY_TREE_BUSH = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_mahogany_bush"), Feature.TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.LOG_MAHOGANY.get().getDefaultState()), new SimpleBlockStateProvider(TerraBlockRegistry.LEAF_MAHOGANY.get().getDefaultState()), new BushFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayerFeature(0, 0, 0))).setHeightmap(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).build()));
        MUSHROOM_GIANT_GLOWING = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("mushroom_giant_glowing"), TerraFeatureRegistry.MUSHROOM_GLOWING.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));

        EBON_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_ebon"), TerraFeatureRegistry.EBON_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        EBON_TREE_FANCY = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_ebon_fancy"), Feature.TREE.withConfiguration((new BaseTreeFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.LOG_EBON.get().getDefaultState()), new SimpleBlockStateProvider(TerraBlockRegistry.LEAF_EBON.get().getDefaultState()), new FancyFoliagePlacer(FeatureSpread.create(2), FeatureSpread.create(4), 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayerFeature(0, 0, 0, OptionalInt.of(4)))).setIgnoreVines().setHeightmap(Heightmap.Type.MOTION_BLOCKING).build()));
        CACTUS_CORRUPT = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_corrupt"), TerraFeatureRegistry.CACTUS_EBON.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));

        SHADE_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_shade"), TerraFeatureRegistry.SHADE_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        CACTUS_CRIMSON = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_crimson"), TerraFeatureRegistry.CACTUS_CRIM.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));

        PEARL_TREE = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_pearl"), TerraFeatureRegistry.PEARL_TREE.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));
        CACTUS_HALLOWED = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_hallowed"), TerraFeatureRegistry.CACTUS_PEARL.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG));

        BOREAL_TREE_TAIGA_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_boreal_taiga_gen"), BOREAL_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(5, 0.05F, 1))));
        BOREAL_TREE_TUNDRA_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_boreal_tundra_gen"), BOREAL_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.05F, 1))));
        PALM_TREE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_palm_gen"), PALM_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.1F, 2))));
        MAHOGANY_TREE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_mahogany_gen"), Feature.RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(MAHOGANY_TREE_BUSH.withChance(0.5F), MAHOGANY_TREE_LARGE.withChance(0.33333334F)), MAHOGANY_TREE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(50, 0.1F, 1))));
        MUSHROOM_GIANT_GLOWING_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("mushroom_giant_glowing_gen"), MUSHROOM_GIANT_GLOWING.withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))));
        TAIGA_TREE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("taiga_tree_gen"), Feature.RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(Features.PINE.withChance(0.33333334F)), Features.SPRUCE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(5, 0.05F, 1))));
        PLANT_BLINKROOT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_blinkroot_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_BLINKROOT.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(64).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(4));
        PLANT_DAYBLOOM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_daybloom_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_DAYBLOOM.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(128).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(2));
        PLANT_DEATHWEED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_deathweed_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_DEATHWEED.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(64).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(2));
        PLANT_FIREBLOOM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_fireblossom_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_FIREBLOSSOM.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(64).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(3));
        PLANT_MOONGLOW_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_moonglow_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_MOONGLOW.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(64).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(4));
        PLANT_SHIVERTHORN_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_shiverthorn_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_SHIVERTHORN.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(128).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(1));
        PLANT_WATERLEAF_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("plant_waterleaf_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_WATERLEAF.get().getDefaultState().with(TerraBlockPotionPlant.AGE, 1)), SimpleBlockPlacer.PLACER).tries(64).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(3));
        ORE_DIRT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_dirt_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.DIRT.getDefaultState(), 33)).range(256).square().count(10));
        ORE_GRAVEL_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_gravel_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.GRAVEL.getDefaultState(), 33)).range(256).square().count(8));
        ORE_SILT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_silt_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.SAND_SILT.get().getDefaultState(), 33)).range(256).square().count(8));
        ORE_SLUSH_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_slush_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.SAND_SLUSH.get().getDefaultState(), 33)).range(256).square().count(8));
        ORE_ANDESITE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_andesite_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.ANDESITE.getDefaultState(), 33)).range(80).square().count(10));
        ORE_DIORITE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_diorite_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.DIORITE.getDefaultState(), 33)).range(80).square().count(10));
        ORE_GRANITE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_granite_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.GRANITE.getDefaultState(), 33)).range(80).square().count(10));
        ORE_SNOW_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_snow_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.SNOW_BLOCK.getDefaultState(), 33)).range(256).square().count(10));
        ORE_ICE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_ice_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.ICE.getDefaultState(), 33)).range(80).square().count(10));
        ORE_SANDSTONE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_sandstone_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.SANDSTONE.getDefaultState(), 33)).range(80).square().count(10));
        ORE_COPPER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_copper_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_COPPER_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_TIN_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_tin_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_TIN_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_IRON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_iron_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.IRON_ORE.getDefaultState(), 10)).range(64).square().count(20));
        ORE_LEAD_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_lead_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_LEAD_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_SILVER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_silver_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_SILVER_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_TUNGSTEN_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_tungsten_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_TUNGSTEN_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_GOLD_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_gold_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.GOLD_ORE.getDefaultState(), 10)).range(32).square().count(2));
        ORE_PLATINUM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_platinum_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_PLATINUM_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_DEMONITE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_demonite_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_DEMONITE_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_CRIMTANE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_crimtane_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_CRIMTANE_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_COBALT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_cobalt_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_COBALT_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_PALLADIUM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_palladium_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_PALLADIUM_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_MYTHRIL_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_mythril_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_MYTHRIL_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_ORICHALCUM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_orichalcum_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_ORICHALCUM_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_ADAMANTITE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_adamantite_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_ADAMANTITE_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_TITANIUM_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_titanium_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_TITANIUM_PURE.get().getDefaultState(), 10)).withPlacement(Placement.RANGE.configure(new TopSolidRangeConfig(32, 0, 64))).square().count(20));
        ORE_AMBER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_amber_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_AMBER_PURE.get().getDefaultState(), 10)).range(16).square());
        ORE_RUBY_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_ruby_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_RUBY_PURE.get().getDefaultState(), 10)).range(16).square());
        ORE_SAPPHIRE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_sapphire_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_SAPPHIRE_PURE.get().getDefaultState(), 10)).range(16).square());
        ORE_TOPAZ_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_topaz_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_TOPAZ_PURE.get().getDefaultState(), 10)).range(16).square());
        ORE_AMETHYST_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_amethyst_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ORE_AMETHYST_PURE.get().getDefaultState(), 10)).range(16).square());
        ORE_COAL_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_coal_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.COAL_ORE.getDefaultState(), 10)).range(128).square().count(20));
        ORE_LAPIS_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_lapis_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.LAPIS_ORE.getDefaultState(), 10)).withPlacement(Placement.DEPTH_AVERAGE.configure(new DepthAverageConfig(16, 16))).square());
        ORE_REDSTONE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_redstone_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.REDSTONE_ORE.getDefaultState(), 10)).range(16).square().count(8));
        ORE_DIAMOND_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_diamond_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.DIAMOND_ORE.getDefaultState(), 10)).range(16).square());
        ORE_EMERALD_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_emerald_gen"), TerraFeatureRegistry.TERRA_ORES.get().withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, Blocks.EMERALD_ORE.getDefaultState(), 10)).withPlacement(Placement.EMERALD_ORE.configure(IPlacementConfig.NO_PLACEMENT_CONFIG)));
        DISC_CLAY_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("disc_clay_gen"), Feature.DISK.withConfiguration(new SphereReplaceConfig(Blocks.CLAY.getDefaultState(), FeatureSpread.create(2, 1), 1, ImmutableList.of(Blocks.DIRT.getDefaultState(), Blocks.CLAY.getDefaultState()))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
        DISC_DIRT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("disc_dirt_gen"), Feature.DISK.withConfiguration(new SphereReplaceConfig(Blocks.DIRT.getDefaultState(), FeatureSpread.create(2, 3), 2, ImmutableList.of(Blocks.DIRT.getDefaultState(), Blocks.CLAY.getDefaultState()))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));
        TRAP_ICE_THIN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("trap_ice_thin"), Feature.ORE.withConfiguration(new OreFeatureConfig(GENERAL_PREDICATE, TerraBlockRegistry.ICE_THIN.get().getDefaultState(), 33)).range(60).square().count(10));

        EBON_TREE_PLAINS_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_ebon_plains_gen"), EBON_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.05F, 1))));
        EBON_TREE_FOREST_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_ebon_forest_gen"), Feature.RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(EBON_TREE_FANCY.withChance(0.1F)), EBON_TREE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(6, 0.1F, 1))));
        EBON_TREE_FOREST_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_ebon_mountain_gen"), Feature.RANDOM_SELECTOR.withConfiguration(new MultipleRandomFeatureConfig(ImmutableList.of(EBON_TREE_FANCY.withChance(0.1F)), EBON_TREE)).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.1F, 1))));
        MUSHROOM_VILE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("mushroom_vile_gen"), Feature.RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_MUSHROOM_VILE.get().getDefaultState()), SimpleBlockPlacer.PLACER)).tries(500).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(2));
        THORN_PURPLE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("thorn_purple_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_THORN_PURPLE.get().getDefaultState().with(TerraBlockThornBush.DOWN, true)), SimpleBlockPlacer.PLACER).tries(1).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(1));
        CACTUS_CORRUPT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_corrupt_gen"), CACTUS_CORRUPT.withPlacement(Features.Placements.PATCH_PLACEMENT).count(1));
        REED_CORRUPT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("reed_corrupt_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.REED_CORRUPT.get().getDefaultState()), new ColumnBlockPlacer(2, 2)).tries(20).xSpread(4).ySpread(0).zSpread(4).preventProjection().requiresWater().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).count(10));
        LAKE_CORRUPT_WATER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_corrupt_water_gen"), TerraFeatureRegistry.LAKE_CORRUPT.get().withConfiguration(new BlockStateFeatureConfig(Blocks.WATER.getDefaultState())).withPlacement(Placement.WATER_LAKE.configure(new ChanceConfig(4))));
        LAKE_CORRUPT_LAVA_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_corrupt_lava_gen"), TerraFeatureRegistry.LAKE_CORRUPT.get().withConfiguration(new BlockStateFeatureConfig(Blocks.LAVA.getDefaultState())).withPlacement(Placement.LAVA_LAKE.configure(new ChanceConfig(80))));
        FREEZE_TOP_CORRUPT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("freeze_top_corrupt_gen"), TerraFeatureRegistry.SNOW_LAYER_CORRUPT.get().withConfiguration(IFeatureConfig.NO_FEATURE_CONFIG));
        DESERT_WELL_CORRUPT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("desert_well_corrupt"), TerraFeatureRegistry.DESERT_WELL_CORRUPT.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).chance(1000));
        DISC_SAND_CORRUPT_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("disc_sand_corrupt_gen"), Feature.DISK.withConfiguration(new SphereReplaceConfig(TerraBlockRegistry.SAND_EBON.get().getDefaultState(), FeatureSpread.create(2, 3), 2, ImmutableList.of(Blocks.DIRT.getDefaultState(), Blocks.CLAY.getDefaultState()))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));

        SHADE_TREE_PLAINS_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_shade_plains_gen"), SHADE_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.05F, 1))));
        SHADE_TREE_FOREST_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_shade_forest_gen"), SHADE_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(6, 0.1F, 1))));
        MUSHROOM_VICIOUS_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("mushroom_vicious_gen"), Feature.RANDOM_PATCH.withConfiguration((new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_MUSHROOM_VICIOUS.get().getDefaultState()), SimpleBlockPlacer.PLACER)).tries(500).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(2));
        THORN_RED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("thorn_red_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_THORN_RED.get().getDefaultState().with(TerraBlockThornBush.DOWN, true)), SimpleBlockPlacer.PLACER).tries(1).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(1));
        CACTUS_CRIMSON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_crimson_gen"), CACTUS_CRIMSON.withPlacement(Features.Placements.PATCH_PLACEMENT).count(1));
        REED_CRIMSON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("reed_crimson_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.REED_CRIMSON.get().getDefaultState()), new ColumnBlockPlacer(2, 2)).tries(20).xSpread(4).ySpread(0).zSpread(4).preventProjection().requiresWater().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).count(10));
        LAKE_CRIMSON_WATER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_crimson_water_gen"), TerraFeatureRegistry.LAKE_CRIMSON.get().withConfiguration(new BlockStateFeatureConfig(Blocks.WATER.getDefaultState())).withPlacement(Placement.WATER_LAKE.configure(new ChanceConfig(4))));
        LAKE_CRIMSON_LAVA_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_crimson_lava_gen"), TerraFeatureRegistry.LAKE_CRIMSON.get().withConfiguration(new BlockStateFeatureConfig(Blocks.LAVA.getDefaultState())).withPlacement(Placement.LAVA_LAKE.configure(new ChanceConfig(80))));
        FREEZE_TOP_CRIMSON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("freeze_top_crimson_gen"), TerraFeatureRegistry.SNOW_LAYER_CRIMSON.get().withConfiguration(IFeatureConfig.NO_FEATURE_CONFIG));
        DESERT_WELL_CRIMSON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("desert_well_crimson"), TerraFeatureRegistry.DESERT_WELL_CRIMSON.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).chance(1000));
        DISC_SAND_CRIMSON_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("disc_sand_crimson_gen"), Feature.DISK.withConfiguration(new SphereReplaceConfig(TerraBlockRegistry.SAND_CRIM.get().getDefaultState(), FeatureSpread.create(2, 3), 2, ImmutableList.of(Blocks.DIRT.getDefaultState(), Blocks.CLAY.getDefaultState()))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));

        PEARL_TREE_PLAINS_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_pearl_plains_gen"), PEARL_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(0, 0.05F, 1))));
        PEARL_TREE_FOREST_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("tree_pearl_forest_gen"), PEARL_TREE.withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).withPlacement(Placement.COUNT_EXTRA.configure(new AtSurfaceWithExtraConfig(6, 0.1F, 1))));
        CACTUS_HALLOWED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("cactus_hallowed_gen"), CACTUS_HALLOWED.withPlacement(Features.Placements.PATCH_PLACEMENT).count(1));
        REED_HALLOWED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("reed_hallowed_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.REED_HALLOWED.get().getDefaultState()), new ColumnBlockPlacer(2, 2)).tries(20).xSpread(4).ySpread(0).zSpread(4).preventProjection().requiresWater().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).count(10));
        LAKE_HALLOWED_WATER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_hallowed_water_gen"), TerraFeatureRegistry.LAKE_HALLOWED.get().withConfiguration(new BlockStateFeatureConfig(Blocks.WATER.getDefaultState())).withPlacement(Placement.WATER_LAKE.configure(new ChanceConfig(4))));
        LAKE_HALLOWED_LAVA_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_hallowed_lava_gen"), TerraFeatureRegistry.LAKE_HALLOWED.get().withConfiguration(new BlockStateFeatureConfig(Blocks.LAVA.getDefaultState())).withPlacement(Placement.LAVA_LAKE.configure(new ChanceConfig(80))));
        FREEZE_TOP_HALLOWED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("freeze_top_hallowed_gen"), TerraFeatureRegistry.SNOW_LAYER_HALLOWED.get().withConfiguration(IFeatureConfig.NO_FEATURE_CONFIG));
        DESERT_WELL_HALLOWED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("desert_well_hallowed"), TerraFeatureRegistry.DESERT_WELL_HALLOWED.get().withConfiguration(NoFeatureConfig.NO_FEATURE_CONFIG).withPlacement(Features.Placements.HEIGHTMAP_PLACEMENT).chance(1000));
        DISC_SAND_HALLOWED_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("disc_sand_hallowed_gen"), Feature.DISK.withConfiguration(new SphereReplaceConfig(TerraBlockRegistry.SAND_PEARL.get().getDefaultState(), FeatureSpread.create(2, 3), 2, ImmutableList.of(Blocks.DIRT.getDefaultState(), Blocks.CLAY.getDefaultState()))).withPlacement(Features.Placements.SEAGRASS_DISK_PLACEMENT));

        THORN_JUNGLE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("thorn_jungle_gen"), Feature.RANDOM_PATCH.withConfiguration(new BlockClusterFeatureConfig.Builder(new SimpleBlockStateProvider(TerraBlockRegistry.PLANT_THORN_JUNGLE.get().getDefaultState().with(TerraBlockThornBush.DOWN, true)), SimpleBlockPlacer.PLACER).tries(1).preventProjection().build()).withPlacement(Features.Placements.PATCH_PLACEMENT).chance(1));
        LAKE_HALLOWED_WATER_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("lake_jungle_water_gen"), TerraFeatureRegistry.LAKE_JUNGLE.get().withConfiguration(new BlockStateFeatureConfig(Blocks.WATER.getDefaultState())).withPlacement(Placement.WATER_LAKE.configure(new ChanceConfig(3))));
        ORE_CHLOROPHYTE_GEN = WorldGenRegistries.register(WorldGenRegistries.CONFIGURED_FEATURE, Reference.path("ore_chlorophyte_gen"), Feature.ORE.withConfiguration(new OreFeatureConfig(JUNGLE_MUD_PREDICATE, TerraBlockRegistry.ORE_CHLOROPHYTE.get().getDefaultState(), 10)).range(80).square().count(10));

    }
}
